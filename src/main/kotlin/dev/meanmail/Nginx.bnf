{
  parserClass="dev.meanmail.psi.parser.NginxParser"
  parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix=""
  psiImplClassSuffix="Impl"
  psiPackage="dev.meanmail.psi"
  psiImplPackage="dev.meanmail.psi.impl"

  elementTypeHolderClass="dev.meanmail.psi.Types"
  elementTypeClass="dev.meanmail.psi.NginxElementType"
  tokenTypeClass="dev.meanmail.psi.NginxTokenType"

  psiImplUtilClass="dev.meanmail.psi.PsiImplUtil"

  implements("directive_stmt")="dev.meanmail.psi.WithPathElement"
  implements("lua_code_stmt")="com.intellij.psi.PsiLanguageInjectionHost"
  implements("value_stmt")="dev.meanmail.psi.ReferenceElement"
}

nginxFile ::= statement*

private statement ::= directive_stmt [COMMENT]

string_stmt ::= (QUOTE [STRING] QUOTE) | (DQUOTE [DQSTRING] DQUOTE) {pin=1}
name_stmt ::= IDENTIFIER
variable_stmt ::= VARIABLE
value_stmt ::= IDENTIFIER
               | IP_RANGE
               | IP_ADDRESS
               | NUMBER
               | NUMBER_TIME
               | NUMBER_SIZE
               | VALUE
               | string_stmt
               | variable_stmt
               | concatenated_expr

block_stmt ::= LBRACE statement* RBRACE {pin=1}
regular_directive_stmt ::= name_stmt BINARY_OPERATOR? value_stmt* (SEMICOLON | block_stmt) {pin=1}

map_stmt ::= MAP
map_volatile_stmt ::= MAP_VOLATILE SEMICOLON {pin=1}
map_default_stmt ::= MAP_DEFAULT value_stmt SEMICOLON {pin=1}
map_hostnames_stmt ::= MAP_HOSTNAMES SEMICOLON {pin=1}
map_include_stmt ::= MAP_INCLUDE value_stmt SEMICOLON {pin=1}
map_value_stmt ::= value_stmt value_stmt SEMICOLON {pin=1}
map_block_content ::= 
    map_volatile_stmt |
    map_default_stmt |
    map_hostnames_stmt |
    map_include_stmt |
    map_value_stmt
map_block_stmt ::= LBRACE map_block_content* RBRACE {pin=1}
map_directive_stmt ::= map_stmt value_stmt value_stmt map_block_stmt {pin=1}

geo_stmt ::= GEO
geo_delete_stmt ::= GEO_DELETE value_stmt SEMICOLON {pin=1}
geo_default_stmt ::= GEO_DEFAULT value_stmt SEMICOLON {pin=1}
geo_proxy_stmt ::= GEO_PROXY value_stmt SEMICOLON {pin=1}
geo_ranges_stmt ::= GEO_RANGES SEMICOLON {pin=1}
geo_include_stmt ::= GEO_INCLUDE value_stmt SEMICOLON {pin=1}
geo_value_stmt ::= value_stmt value_stmt SEMICOLON {pin=1}
geo_block_content ::= 
    geo_delete_stmt |
    geo_default_stmt |
    geo_proxy_stmt |
    geo_ranges_stmt |
    geo_include_stmt |
    geo_value_stmt
geo_block_stmt ::= LBRACE geo_block_content* RBRACE {pin=1}
geo_directive_stmt ::= geo_stmt variable_stmt [variable_stmt] geo_block_stmt {pin=1}

lua_stmt ::= LUA_BLOCK_DIRECTIVE
lua_code_stmt ::= LUA+ {pin=1}
lua_block_stmt ::= LBRACE lua_code_stmt RBRACE {pin=1}
lua_directive_stmt ::= lua_stmt value_stmt* lua_block_stmt {pin=1}

if_stmt ::= IF
concatenated_expr ::= (variable_stmt | IP_ADDRESS | NUMBER | NUMBER_TIME | NUMBER_SIZE | VALUE | IDENTIFIER) +
condition_expr ::= concatenated_expr | string_stmt
condition_stmt ::= UNARY_OPERATOR condition_expr | condition_expr (BINARY_OPERATOR condition_expr)?
if_paren_stmt ::= LPAREN condition_stmt RPAREN {pin=1}
if_directive_stmt ::= if_stmt if_paren_stmt block_stmt {pin=1}

location_stmt ::= LOCATION
location_modifier_stmt ::= (BINARY_OPERATOR | CARET_TILDE)?
location_path_stmt ::= value_stmt
location_directive_stmt ::= location_stmt location_modifier_stmt? location_path_stmt block_stmt {pin=1}

return_stmt ::= RETURN
return_directive_stmt ::= return_stmt value_stmt* SEMICOLON {pin=1}

directive_stmt ::= (
                    regular_directive_stmt
                    | map_directive_stmt
                    | geo_directive_stmt
                    | lua_directive_stmt
                    | if_directive_stmt
                    | location_directive_stmt
                    | return_directive_stmt
                   )
